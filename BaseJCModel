import numpy as np
import matplotlib.pyplot as plt
from qutip import *
import pandas as pd
import os

# Define system parameters
omega_cavity = 1.0 * 2 * np.pi  # Frequency of the cavity (in rad/s)
omega_atom = 1.0 * 2 * np.pi  # Frequency of the atom (in rad/s)
g = 0.05 * 2 * np.pi  # Coupling strength between the atom and the cavity (in rad/s)
kappa = 0.005  # Dissipation rate of the cavity (in rad/s)
gamma = 0.05  # Dissipation rate of the atom (in rad/s)
N = 20  # Maximum number of photons in the cavity
n_th_a = 0.1  # Average number of thermal bath excitations
n_photons = 1  # Initial number of photons in the cavity
tlist = np.linspace(0, 25, 101)  # Times at which to calculate the system's state

# Define the initial state of the system as a tensor product of the cavity's state and the atom's state
# The cavity is initially in a Fock state with n_photons photons, and the atom is initially in a superposition of its ground and excited states
psi0 = tensor(fock(N, n_photons), basis(2, 0) + basis(2, 1)).unit()

# Define the annihilation operator for the cavity and the atom
a = tensor(destroy(N), qeye(2))  # Operator to destroy a photon in the cavity
sm = tensor(qeye(N), destroy(2))  # Operator to lower the atom from the excited state to the ground state

# Define the Hamiltonian of the system
# The first term describes the energy of the cavity, the second term the energy of the atom, and the last term the interaction energy between the cavity and the atom
H = omega_cavity * a.dag() * a + omega_atom * sm.dag() * sm + g * (a.dag() + a) * (sm + sm.dag())

# Define the collapse operators that describe the dissipation of the system
c_ops = []

# Add the operator that describes the relaxation of the cavity, i.e., a photon leaving the cavity and going into the thermal bath
rate = kappa * (1 + n_th_a)
if rate > 0.0:
    c_ops.append(np.sqrt(rate) * a)

# Add the operator that describes the excitation of the cavity, i.e., a photon from the thermal bath entering the cavity
rate = kappa * n_th_a
if rate > 0.0:
    c_ops.append(np.sqrt(rate) * a.dag())

# Add the operator that describes the relaxation of the atom, i.e., the atom going from the excited state to the ground state
rate = gamma
if rate > 0.0:
    c_ops.append(np.sqrt(rate) * sm)

# Define the Pauli operators sigma X, sigma Y, and sigma Z for the atom
sigmax = tensor(qeye(N), sigmax())
sigmay = tensor(qeye(N), sigmay())
sigmaz = tensor(qeye(N), sigmaz())

# Define the list of operators for which to calculate the expectation value
e_ops = [omega_cavity * a.dag() * a, omega_atom * sm.dag() * sm, sigmax, sigmay, sigmaz, H]

# Solve the master equation for the system
output = mesolve(H, psi0, tlist, c_ops, e_ops)

# Extract the expectation values from the solution
e_c = output.expect[0]  # Expectation value of the number of photons in the cavity
e_a = output.expect[1]  # Expectation value of the atom's excited state population
sigma_x = output.expect[2]  # Expectation value of sigma X
sigma_y = output.expect[3]  # Expectation value of sigma Y
sigma_z = output.expect[4]  # Expectation value of sigma Z
e_t = output.expect[5]  # Expectation value of the total energy of the system

# Create plots to visualize the evolution of the system
fig, axes = plt.subplots(5, 1, figsize=(10, 22))

# Plot the expectation value of sigma Z
axes[0].plot(tlist, sigma_z)
axes[0].set_xlabel('Time')
axes[0].set_ylabel('Expectation value')
axes[0].set_title('Expectation value of sigma Z')

# Plot the expectation values of sigma X and sigma Y
axes[1].plot(tlist, sigma_x, label="Sigma X")
axes[1].plot(tlist, sigma_y, label="Sigma Y")
axes[1].legend(loc=0)
axes[1].set_xlabel('Time')
axes[1].set_ylabel('Expectation value')
axes[1].set_title('Expectation values of sigma X and sigma Y')

# Plot the total energy of the qubit (the atom)
axes[2].plot(tlist, e_a, color='blue')
axes[2].set_xlabel('Time')
axes[2].set_ylabel('Qubit Energy')
axes[2].set_title('Total Qubit Energy')

# Plot the total energy of the cavity
axes[3].plot(tlist, e_c, color='green')
axes[3].set_xlabel('Time')
axes[3].set_ylabel('Cavity Energy')
axes[3].set_title('Total Cavity Energy')

# Plot the total energy of the system
axes[4].plot(tlist, e_t, color='purple')
axes[4].set_xlabel('Time')
axes[4].set_ylabel('Total Energy')
axes[4].set_title('Total Energy')

# Adjust the layout of the plots
plt.tight_layout()
plt.show()

# Define the base filename
base_filename = 'BaseJCModel010101'

# Save the figure to a file with the next available filename
file_count = 1
filename = f'{base_filename}.png'
while filename in os.listdir():
    filename = f'{base_filename}0{file_count}.png'
    file_count += 1
plt.savefig(filename)

# Close the figure
plt.close(fig)

# Print the expectation values at each time step
for i in range(len(tlist)):
    print(f"{tlist[i]:.2f} Total Energy {e_t[i]:.12f} Qubit Energy {e_a[i]:.12f} Cavity Energy {e_c[i]:.12f} Sigma Z {sigma_z[i]:.12f} Sigma Y {sigma_y[i]:.12f} Sigma X {sigma_x[i]:.12f}")

# Create a DataFrame with the expectation values
data = pd.DataFrame({
    'Time Step': tlist,
    'Energy Total': e_t,
    'Qubit Energy': e_a,
    'Cavity Energy': e_c,
    'Sigma Z': sigma_z,
    'Sigma Y': sigma_y,
    'Sigma X': sigma_x
})

# Save the DataFrame to a file with the next available filename
file_count = 1
filename = f'{base_filename}.csv'
while filename in os.listdir():
    filename = f'{base_filename}0{file_count}.csv'
    file_count += 1
data.to_csv(filename, index=False)
